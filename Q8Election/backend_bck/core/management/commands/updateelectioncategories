from django.core.management.base import BaseCommand
from apps.categories.models import Category  # Update this with the actual import path
from apps.elections.models import Election  # Update this with the actual import path

class Command(BaseCommand):
    help = 'Update specific election subcategories'

    def update_specific_election_subcategories(self):
        sub_category_mapping = {
            340: 3116,
            45: 3150,
            # Add more mappings as needed
        }

        updated_count = 0
        not_found_count = 0

        for old_sub_category_id, new_sub_category_id in sub_category_mapping.items():
            try:
                # Fetch the new subcategory from the database
                new_sub_category = Category.objects.get(id=new_sub_category_id)

                # Update the elections' sub_category
                elections_updated = Election.objects.filter(sub_category_id=old_sub_category_id).update(sub_category=new_sub_category)

                if elections_updated > 0:
                    self.stdout.write(self.style.SUCCESS(f'Successfully updated sub_category for {elections_updated} elections from {old_sub_category_id} to {new_sub_category}'))
                    updated_count += elections_updated
                else:
                    self.stdout.write(self.style.WARNING(f'No elections found with sub_category ID {old_sub_category_id}'))
                    not_found_count += 1

            except Category.DoesNotExist:
                self.stdout.write(self.style.ERROR(f'Category with ID {new_sub_category_id} does not exist'))

            except Exception as e:
                self.stdout.write(self.style.ERROR(f'An error occurred: {str(e)}'))

        self.stdout.write(self.style.SUCCESS(f'Total elections updated: {updated_count}'))
        self.stdout.write(self.style.WARNING(f'Total not found: {not_found_count}'))

    def handle(self, *args, **kwargs):
        self.stdout.write(self.style.SUCCESS('Starting updating specific election subcategories...'))
        self.update_specific_election_subcategories()
        self.stdout.write(self.style.SUCCESS('Update complete!'))

# GitHub documentation for ignoring files
# https://help.github.com/articles/ignoring-files/

#------------------------
# Dependencies
#------------------------

# Node modules and related
/node_modules
/.pnp
.pnp.js

# Python dependencies
# If you're using virtual environments, you might consider ignoring them
# venv/
# __pycache__/ can be generated when Python files are run
__pycache__/
*.pyc
*.pyo

#------------------------
# Caches and Logs
#------------------------

# Python caches
.pytest_cache/

# Node/npm logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

#------------------------
# Configuration & Environment
#------------------------

# OS generated
# .DS_Store

# Environment variables and secrets
# .env.local
# .env.development.local
# .env.test.local
# .env.production.local

#------------------------
# Dependency Locks
#------------------------

# While many projects include them, if you choose not to:
# package-lock.json
# yarn.lock

#------------------------
# Build Output
#------------------------

# Compiled frontend assets
# frontend/build/

#------------------------
# Miscellaneous
#------------------------

# Code coverage reports (if generated)
# /coverage

# Any other folders/files not meant for the server or repository can be added here:
# others/


# Things to include at a later stage
# The decision of what to include in the .gitignore file depends on the specifics of your project, its architecture, and your deployment workflow. However, I can provide some general guidance:

node_modules/:

# This directory contains all the Node.js dependencies of your project. These dependencies are usually large, and they can be reinstalled at any time using the yarn install or npm install command.
# Recommendation: Include in .gitignore.
# Build/Output directories (e.g., frontend/build/ for a React app):

# This contains the compiled output of your frontend code. Including this in the repository can lead to merge conflicts and unnecessary repository bloat.
# However, in some workflows (especially if you aren't deploying using CI/CD tools), you might want this directory in your repo.
# Recommendation: Usually include in .gitignore, unless you have a specific reason to keep the build files in your repo.
# .env files and other configuration files:

# Files like .env.local, .env.production.local, etc., usually contain sensitive information or environment-specific settings. They should not be in the repo unless they're templates or examples without real data.
# Recommendation: Include in .gitignore.
# Cache directories and files:

# Directories like __pycache__/ and files with extensions .pyc and .pyo are Python bytecode files. These are regenerated every time the Python file runs, so there's no need to include them.
# Recommendation: Include in .gitignore.
# Logs and debug files:

# Files like npm-debug.log, yarn-error.log, etc., are temporary and are usually not required in the repository.
# Recommendation: Include in .gitignore.
# yarn.lock or package-lock.json:

# These lock files ensure that the exact versions of dependencies are installed across setups. They're important to keep consistency.
# Recommendation: Do NOT include in .gitignore. They should be committed to the repository.
# To directly answer your question, yes, the build output (like frontend/build/) and the node_modules directory are commonly added to .gitignore in many projects. However, always consider your specific use-case and workflow before deciding.




